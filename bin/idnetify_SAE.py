#!/usr/bin/python3
from optparse import OptionParser
usage = "usage: %prog [options] -i Input_align_file_for_call_peak -b Bam_file -n Experiment_name  -o Output_directory  -g Effective_genome_size --g_file the_chrom_size_file  "
parser = OptionParser(usage = usage)
parser.add_option("-n","--name", dest="output_name", default=None,help = "Experiment name, which will be used to generate output file names.")
parser.add_option("-o","--outdir", dest="output_path", default=None,help = "Path to output directory.")
parser.add_option("-p","--processes", dest="Thread", default="1",help = "Number of processes to use.")
##########Macs2 call peak
parser.add_option("-i","--input_align", dest="input_file", default=None,help = "The algin file of ATAC-seq data. It is strongly recommended to use the tn5.tagAlign file generated by the ENCODE ATAC-seq pipeline(https://github.com/kundajelab/atac_dnase_pipelines), in which all reads aligning to the + strand were offset by +4 bp, and all reads aligning to the – strand were offset −5 bp.")
parser.add_option("-f","--file_format", dest="file_format", default="AUTO",help = "Format of algin file,{AUTO,BAM,SAM,BED,ELAND,ELANDMULTI,ELANDEXPORT,BOWTIE,BAMPE,BEDPE}. The default AUTO option will let MACS decide which format. Default: AUTO.")
parser.add_option("-g","--genome", dest="genome_size", default="hs",help = "Effective genome size.It can be 1.0e+9 or 1000000000, or shortcuts:'hs' for human (2.7e9), 'mm' for mouse(1.87e9), 'ce' for C. elegans (9e7) and 'dm' for fruitfly (1.2e8). Default: hs.")
parser.add_option("--pvalue", dest="peak_pvalue", default="5",help = "Pvalue threshold to filter peak, Default: 5 (means P value < 1E-5).")
parser.add_option("--macs2_call_peak", dest="macs2_call_peak_switch", default="on",help = 'Whether using macs2 to call peak,can choose "on" or "off". Default: on.')
parser.add_option("--broad_peak", dest="broad_peak_file_filter_sort", default=None,help = 'If choose "off" for --macs2_call_peak, please provide a broad peak bed file.')
##########Footprint analysis
parser.add_option("-b","--bam_file", dest="input_bam_file", default=None,help = "Bam file of ATAC-seq data.")
parser.add_option("-A","--ATAC_module",action="store_true",dest="ATAC_seq_module", default=True,help = "ATAC-seq mode (default: True).")
parser.add_option("--chrom_size", dest="chrom_size_file", default=None,help = "The file of each chromosome size.")
parser.add_option("--wellington_footprints", dest="wellington_footprints_switch", default="on",help = 'Whether to execute footprint analysis,can choose "on" or "off". Default:on')
parser.add_option("--footprint_file", dest="footprint_file", default=None,help = 'If choose "off" for --wellington_footprints, please provide the footprint bed file with score information.')
##########Footprint analysis
parser.add_option("--proximal",dest="proximal_identify", default="on",help = 'Whether to identify proximal(TSS)-SAE, can choose "on" or "off". Default: on.')
parser.add_option("--distal",dest="distal_identify", default="on",help = 'Whether to identify distal-SAE,can choose "on" or "off". Default: on.')
parser.add_option("--c_proximal", dest="cut_off_proximal", default="10",help = 'The threshold of footrint score and footprint number to identify proximal(TSS)-SAE. {10,15,20}. Default: 10.')
parser.add_option("--c_distal", dest="cut_off_distal", default="10",help = "The threshold of footrint score and footprint number to identify distal-SAE. {10,15,20}. Default: 10.")
parser.add_option("--TSS", dest="promoter_file", default=None,help = "Bed file of gene promoter or TSS site.")
parser.add_option("--hk", dest="houseKeeping_promoter_file", default=None,help = "Bed file of houseKeeping gene promoter or TSS site.")
(options,args) = parser.parse_args()

if not options.output_name or not options.output_path or not options.input_file or not options.input_bam_file or not options.chrom_size_file:
    print("Missing parameter, please read the parameter description")
    parser.print_help()
    exit()

if not options.houseKeeping_promoter_file :
    delete_houseKeeping = "off"
else:
    delete_houseKeeping = "on"
if options.ATAC_seq_module == True :
    ATAC_module ="-A"
else :
    ATAC_module =" "

import os
default_path=os.getcwd()
if  not options.output_path :
    options.output_path = default_path

import subprocess
import datetime
import os.path
log_file1=open(options.output_path+"/Footprint_pipeline.log","a")
#############call broad peak
broad_peak_file=options.output_path+'/'+options.output_name+'_peaks.broadPeak'
broad_peak_file_filter=broad_peak_file+'_pfilter.bed'
if options.macs2_call_peak_switch== "on" :
    log_file2=open(options.output_path+"/macs2_call_peak.log","w")
    now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print("###########################\n"+now_time+" Begain to call peak\n",file=log_file1)
    callpeak_command='macs2 callpeak  -t '+options.input_file +' -f '+options.file_format +' -g '+ options.genome_size+' -n '+ options.output_name+ ' --outdir '+ options.output_path+' -p 0.01 --nomodel --shift -75 --extsize 150 -B --broad  --keep-dup all '
    print(callpeak_command+"\n",file=log_file1)
    a1=subprocess.call(callpeak_command,shell=True,stderr=log_file2)
    now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    if a1 ==0 :
        print(now_time+" Call peak complete\n",file=log_file1)
    else :
        print(now_time+" Call peak error,please read the macs2_call_peak.log \n",file=log_file1)
    subprocess.call("awk ' $1!~/\#/ && $8> "+ options.peak_pvalue +" {print}' " + broad_peak_file + ">" + broad_peak_file_filter,shell=True)
    broad_peak_file_filter_sort=broad_peak_file_filter+'.sort.bed'
    subprocess.call("bedtools sort -i " + broad_peak_file_filter + "|cut -f1,2,3 |awk '$3-$2 > 100 '>" + broad_peak_file_filter_sort,shell=True)
elif options.macs2_call_peak_switch== "off" :
    now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    broad_peak_file_filter_sort=options.broad_peak_file_filter_sort
    print("###########################\n"+now_time+" Skip call peak\n",file=log_file1)
############footprint analysis
if options.wellington_footprints_switch=="on" :
    log_file3=open(options.output_path+"/wellington_footprints.log","w")
    footprint_out_path=options.output_path+"/wellington_footprints"
    if  os.path.exists(footprint_out_path) ==False :
        subprocess.call("mkdir "+ footprint_out_path ,shell=True)
    footprint_path=footprint_out_path+"/p_value_cutoffs/"+options.output_name
    now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(now_time+" Begain to footprint analysis\n",file=log_file1)
    footprint_command="wellington_footprints.py -p " + options.Thread+" " + ATAC_module +" -o " + options.output_name +' ' +broad_peak_file_filter_sort +" " + options.input_bam_file +" " + footprint_out_path 
    print(footprint_command+"\n",file=log_file1)
    a2=subprocess.call(footprint_command,shell=True,stderr=log_file3)
    now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    if a2 ==0 :
        print(now_time+" Footprint analysis complete\n",file=log_file1)
    else :
        print(now_time+" Footprint analysis error,please read the wellington_footprints.log \n",file=log_file1)
    subprocess.call("mv " + footprint_out_path +"/p\ value\ cutoffs "+footprint_out_path+ "/p_value_cutoffs ",shell=True)
    WellingtonFootprints_wig_file=footprint_out_path+"/"+options.output_name+".WellingtonFootprints.wig"
    subprocess.call("perl -e 'while(<>){$_=~s/start\=0/start\=1/ig if($_=~/[A-Z]/);print $_}' "+WellingtonFootprints_wig_file+" > "+footprint_out_path+"/"+options.output_name+".WellingtonFootprints_tmp.wig",shell=True)
    subprocess.call("wigToBigWig -clip "+footprint_out_path+"/"+options.output_name+".WellingtonFootprints_tmp.wig " + options.chrom_size_file +" "+footprint_out_path+"/"+options.output_name+".WellingtonFootprints.bw",shell=True,stderr=log_file3)
    WellingtonFootprints_bw_file=footprint_out_path+"/"+options.output_name+".WellingtonFootprints.bw"
    WellingtonFootprints_bdg_file=footprint_out_path+"/"+options.output_name+".WellingtonFootprints.bdg"
    footprint_file_out=footprint_path+".WellingtonFootprints.-10.bed"
    subprocess.call("bigWigToBedGraph  "+ WellingtonFootprints_bw_file + " "+WellingtonFootprints_bdg_file,shell=True)
    subprocess.call("bedtools intersect -a  "+ footprint_file_out + " -b "+WellingtonFootprints_bdg_file + "  -wa -wb > "+ footprint_path+"WellingtonFootprints_overlap_score.bed" ,shell=True,stderr=log_file3)
    subprocess.call("bedtools sort -i  "+ footprint_path+"WellingtonFootprints_overlap_score.bed  >" + footprint_path+"WellingtonFootprints_overlap_score_sort.bed" ,shell=True)
    subprocess.call("bedtools merge -i  "+ footprint_path+"WellingtonFootprints_overlap_score_sort.bed -c 4,10,5  -o distinct,min,distinct >  " + footprint_path+"WellingtonFootprints_score.bed" ,shell=True)
    footprint_score_file=footprint_path+"WellingtonFootprints_score.bed"
################cut_wig_TO_bw
    bw_file_path=footprint_out_path+"/cut_wig"
    log_file4=open(options.output_path+"/cut_wig_TO_bw.log","w")
    if  os.path.exists(bw_file_path) ==False :
        subprocess.call("mkdir "+ bw_file_path ,shell=True)
    now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(now_time+" Begain to creat cut bw file\n",file=log_file1)
    creat_dnase_wig_command="dnase_wig_tracks.py "+ broad_peak_file_filter_sort +" " +options.input_bam_file+" "+ bw_file_path+"/"+options.output_name+"_danse_fr.wig "+" "+ bw_file_path+"/"+options.output_name+"_danse_rev.wig "+ATAC_module
    subprocess.call(creat_dnase_wig_command,shell=True,stderr=log_file4)
    merge_fr_rev_wig_command=" encode_ATAC-seq_wig_merge.pl -fr " +bw_file_path+"/"+options.output_name+"_danse_fr.wig -rev " +  bw_file_path+"/"+options.output_name+"_danse_rev.wig -out " +bw_file_path+"/"+options.output_name+"_danse_merge_fr_rev.wig"
    subprocess.call(merge_fr_rev_wig_command,shell=True,stderr=log_file4)
    wigToBigWig_command_1="wigToBigWig -clip "+bw_file_path+"/"+options.output_name+"_danse_merge_fr_rev.wig " + options.chrom_size_file +" "+bw_file_path+"/"+options.output_name+"_danse_merge_fr_rev.bw"
    a3=subprocess.call(wigToBigWig_command_1,shell=True,stderr=log_file4)
    print(creat_dnase_wig_command+"\n\n"+merge_fr_rev_wig_command+"\n\n"+wigToBigWig_command_1+"\n",file=log_file1)
    now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    if a3 ==0 :
         print(now_time+" Creating of cut bw file complete\n",file=log_file1)
    else :
         print(now_time+" Creating of cut bw file error,please read the cut_wig_TO_bw.log \n",file=log_file1)
elif  options.wellington_footprints_switch== "off" :
    footprint_score_file=options.footprint_file
    now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(now_time+" Skip footprint analysis\n",file=log_file1)

###################idnetify SAE
now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
print(now_time+" Begain to identify super broad peak\n",file=log_file1)
def identify_super_peak (ATAC_peak,footprint,cut_off,out_path) :
    subprocess.call(' Footprint_score.R '+ footprint+" "+out_path+"/ATAC_peak_footprint_score_stat.tiff "+out_path+"/footprint_score_cut_off",shell=True)
    footprint_score_cut_off=open(out_path+'/footprint_score_cut_off',"r")
    data=footprint_score_cut_off.read()
    data=data.strip("\n")
    data=data.split("\n")
    cut_off_dict1={}
    for line in  data :
        i=line.split("\t")
        cut_off_dict1[i[0]]=i[1]
    cut_off="top"+cut_off+"%"
    score=cut_off_dict1[cut_off]
    footprint_score_filter=out_path+"/"+options.output_name+".WellingtonFootprints."+score+".bed"
    subprocess.check_call("awk '$5< " +score + "{print $0}' " + footprint +" > "+ footprint_score_filter ,shell=True)
    peak_overlap_footprint=open(out_path+"/"+options.output_name+"_broadPeak_overlap_footprints.bed","w")
    subprocess.check_call(["bedtools","intersect","-a",ATAC_peak,"-b",footprint_score_filter,"-wa","-wb"],stdout=peak_overlap_footprint,shell=False)
    subprocess.call("awk '{print $1"+ '"-" $2'+ '"-"'+ "$3}' " +out_path+"/"+ options.output_name+"_broadPeak_overlap_footprints.bed"+ " | sort |uniq -c  |awk '{print $2 "+'"\t"'+" $1}' > " +out_path+"/"+options.output_name+"_broadPeak_footprint_number",shell=True)
    subprocess.call(' Footprint_number.R '+ out_path+"/"+options.output_name+"_broadPeak_footprint_number "+out_path+"/ATAC_peak_footprint_number_stat.tiff "+ out_path+"/footprint_number_cut_off",shell=True)
    footprint_number_cut_off=open(out_path+'/footprint_number_cut_off',"r")
    data1=footprint_number_cut_off.read()
    data1=data1.strip("\n")
    data1=data1.split("\n")
    cut_off_dict2={}
    for line in  data1 :
        i=line.split("\t")
        cut_off_dict2[i[0]]=i[1]
    number=cut_off_dict2[cut_off]
    subprocess.check_call("awk '$2>= "+number+' {print $1 '+ '"\t"'+ "$2}' "+ out_path+"/"+options.output_name+"_broadPeak_footprint_number | sed 's/-/"+r'\t'+"/g' > "+ out_path+ "/"+ options.output_name +"_super_ATAC_broad_peak.bed" ,shell=True)
    subprocess.check_call("awk '$2< "+number+' {print $1 '+ '"\t"'+ "$2}' "+ out_path+"/"+options.output_name+"_broadPeak_footprint_number | sed 's/-/"+r'\t'+"/g' > "+ out_path+ "/"+ options.output_name +"_typical_ATAC_broad_peak.bed" ,shell=True)
    subprocess.check_call("bedtools intersect -a "+ ATAC_peak+" -b " + footprint_score_filter+ " -wa -v |awk '{print $1 "+ ' "\t" $2'+'"\t" $3 "\t"'+" 0} ' |cat >> " + out_path+ "/"+ options.output_name +"_typical_ATAC_broad_peak.bed",shell=True)
    return
####distal
if options.distal_identify == "on" : 
    distal_out_path=options.output_path+"/distal"
    distal_ATAC_peak=options.output_path+"/" +options.output_name +"_distal_ATAC_broad_peak.bed"
    distal_footprint=options.output_path+"/" + options.output_name +"_distal.WellingtonFootprints.10.bed"
    if  os.path.exists(distal_out_path) ==False :
        subprocess.call("mkdir "+ distal_out_path ,shell=True)
    subprocess.check_call("bedtools intersect -a "+ broad_peak_file_filter_sort+" -b " + options.promoter_file + " -wa -v > " + distal_ATAC_peak,shell=True)
    subprocess.check_call("bedtools intersect -a "+footprint_score_file +" -b "  + distal_ATAC_peak + " -wa -u > " +distal_footprint ,shell=True)
    identify_super_peak(distal_ATAC_peak,distal_footprint,options.cut_off_distal,distal_out_path)
elif options.distal_identify == "off" :
    now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(now_time+" Skip identifying distal SAE \n",file=log_file1)
####proximal
if options.proximal_identify == "on" :
    proximal_out_path=options.output_path+"/proximal"
    proximal_ATAC_peak=options.output_path+"/" +options.output_name +"_proximal_ATAC_broad_peak.bed"
    proximal_ATAC_peak_non_HK=options.output_path+"/" +options.output_name +"_proximal_ATAC_broad_peak_non_HK_gene.bed"
    proximal_footprint=options.output_path+"/" + options.output_name +"_proximal.WellingtonFootprints.10.bed"
    proximal_footprint_non_HK=options.output_path+"/" + options.output_name +"_proximal_non_HK_gene.WellingtonFootprints.-10.bed"
    if  os.path.exists(proximal_out_path) ==False :
        subprocess.call("mkdir "+ proximal_out_path ,shell=True)
    if delete_houseKeeping == "off" :
        subprocess.check_call("bedtools intersect -a "+ broad_peak_file_filter_sort+" -b " + options.promoter_file + " -wa -u > " + proximal_ATAC_peak,shell=True)
        subprocess.check_call("bedtools intersect -a "+footprint_score_file +" -b "  + proximal_ATAC_peak + " -wa -u > " +proximal_footprint ,shell=True)
        identify_super_peak(proximal_ATAC_peak,proximal_footprint,options.cut_off_proximal,proximal_out_path)
    elif delete_houseKeeping == "on" :
        subprocess.check_call("bedtools intersect -a "+ broad_peak_file_filter_sort+" -b " + options.promoter_file + " -wa -u > " + proximal_ATAC_peak,shell=True)
        subprocess.check_call("bedtools intersect -a "+ proximal_ATAC_peak+" -b " + options.houseKeeping_promoter_file + " -wa -v > " + proximal_ATAC_peak_non_HK,shell=True)
        subprocess.check_call("bedtools intersect -a "+footprint_score_file +" -b "  + proximal_ATAC_peak + " -wa -u > " +proximal_footprint ,shell=True)
        subprocess.check_call("bedtools intersect -a "+footprint_score_file +" -b "  + proximal_ATAC_peak_non_HK + " -wa -u > " +proximal_footprint_non_HK,shell=True)
        identify_super_peak(proximal_ATAC_peak_non_HK,proximal_footprint_non_HK,options.cut_off_proximal,proximal_out_path)
now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
print(now_time+" Identifying of super broad peak complete\n",file=log_file1)